import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User, AuthResponse } from '../types/auth';\nimport { authApi } from '../services/authApi';\nimport { tokenStorage } from '../utils/tokenStorage';\nimport toast from 'react-hot-toast';\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n  hasPermission: (permission: string) => boolean;\n  hasRole: (role: string | string[]) => boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user && !!token;\n\n  // Initialize auth state on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedToken = tokenStorage.getToken();\n        if (storedToken) {\n          setToken(storedToken);\n          // Verify token and get user data\n          const profile = await authApi.getProfile();\n          setUser(profile.user);\n        }\n      } catch (error) {\n        console.error('Failed to initialize auth:', error);\n        // Clear invalid token\n        tokenStorage.removeToken();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Set up token refresh interval\n  useEffect(() => {\n    if (!token) return;\n\n    const refreshInterval = setInterval(async () => {\n      try {\n        await refreshToken();\n      } catch (error) {\n        console.error('Auto token refresh failed:', error);\n        logout();\n      }\n    }, 15 * 60 * 1000); // Refresh every 15 minutes\n\n    return () => clearInterval(refreshInterval);\n  }, [token]);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      setIsLoading(true);\n      const response: AuthResponse = await authApi.login({ email, password });\n      \n      const { user: userData, token: userToken } = response.data;\n      \n      setUser(userData);\n      setToken(userToken);\n      tokenStorage.setToken(userToken);\n      \n      toast.success(`Welcome back, ${userData.name}!`);\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.error?.message || 'Login failed';\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    try {\n      setUser(null);\n      setToken(null);\n      tokenStorage.removeToken();\n      \n      // Call logout API (optional, for logging purposes)\n      authApi.logout().catch(console.error);\n      \n      toast.success('Logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const refreshToken = async (): Promise<void> => {\n    try {\n      const response: AuthResponse = await authApi.refreshToken();\n      const { user: userData, token: newToken } = response.data;\n      \n      setUser(userData);\n      setToken(newToken);\n      tokenStorage.setToken(newToken);\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      throw error;\n    }\n  };\n\n  const hasPermission = (permission: string): boolean => {\n    if (!user || !user.permissions) return false;\n    return user.permissions.includes(permission) || user.permissions.includes('admin:*');\n  };\n\n  const hasRole = (role: string | string[]): boolean => {\n    if (!user) return false;\n    \n    const roles = Array.isArray(role) ? role : [role];\n    return roles.includes(user.role);\n  };\n\n  // Handle token expiration globally\n  useEffect(() => {\n    const handleUnauthorized = () => {\n      if (isAuthenticated) {\n        toast.error('Session expired. Please log in again.');\n        logout();\n      }\n    };\n\n    // Listen for 401 errors from API calls\n    window.addEventListener('auth:unauthorized', handleUnauthorized);\n    \n    return () => {\n      window.removeEventListener('auth:unauthorized', handleUnauthorized);\n    };\n  }, [isAuthenticated]);\n\n  const contextValue: AuthContextType = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    refreshToken,\n    hasPermission,\n    hasRole,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Hook for checking permissions\nexport const usePermissions = () => {\n  const { hasPermission, hasRole } = useAuth();\n  return { hasPermission, hasRole };\n};\n\n// Hook for auth-protected actions\nexport const useAuthAction = () => {\n  const { isAuthenticated } = useAuth();\n  \n  const withAuth = <T extends any[]>(fn: (...args: T) => void | Promise<void>) => {\n    return (...args: T) => {\n      if (!isAuthenticated) {\n        toast.error('Please log in to perform this action');\n        return;\n      }\n      return fn(...args);\n    };\n  };\n  \n  return { withAuth };\n};"