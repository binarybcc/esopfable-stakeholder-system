import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { Toaster } from 'react-hot-toast';\n\n// Contexts\nimport { AuthProvider } from './contexts/AuthContext';\nimport { ThemeProvider } from './contexts/ThemeContext';\nimport { SocketProvider } from './contexts/SocketContext';\n\n// Components\nimport { Layout } from './components/layout/Layout';\nimport { ProtectedRoute } from './components/auth/ProtectedRoute';\nimport { LoadingSpinner } from './components/ui/LoadingSpinner';\nimport { ErrorBoundary } from './components/error/ErrorBoundary';\n\n// Pages\nimport { LoginPage } from './pages/auth/LoginPage';\nimport { DashboardPage } from './pages/dashboard/DashboardPage';\nimport { StakeholdersPage } from './pages/stakeholders/StakeholdersPage';\nimport { DocumentsPage } from './pages/documents/DocumentsPage';\nimport { CommunicationsPage } from './pages/communications/CommunicationsPage';\nimport { TasksPage } from './pages/tasks/TasksPage';\nimport { EvidencePage } from './pages/evidence/EvidencePage';\nimport { RiskMonitoringPage } from './pages/risk/RiskMonitoringPage';\nimport { PRMessagesPage } from './pages/pr/PRMessagesPage';\nimport { SettingsPage } from './pages/settings/SettingsPage';\nimport { ProfilePage } from './pages/profile/ProfilePage';\nimport { NotFoundPage } from './pages/error/NotFoundPage';\n\n// Styles\nimport './index.css';\n\n// Create React Query client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 3,\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      cacheTime: 10 * 60 * 1000, // 10 minutes\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: true,\n    },\n    mutations: {\n      retry: 1,\n    },\n  },\n});\n\nconst App: React.FC = () => {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider>\n          <AuthProvider>\n            <SocketProvider>\n              <Router>\n                <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n                  <Routes>\n                    {/* Public Routes */}\n                    <Route path=\"/login\" element={<LoginPage />} />\n                    \n                    {/* Protected Routes */}\n                    <Route\n                      path=\"/*\"\n                      element={\n                        <ProtectedRoute>\n                          <Layout>\n                            <Routes>\n                              <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n                              <Route path=\"/dashboard\" element={<DashboardPage />} />\n                              <Route path=\"/stakeholders/*\" element={<StakeholdersPage />} />\n                              <Route path=\"/documents/*\" element={<DocumentsPage />} />\n                              <Route path=\"/communications/*\" element={<CommunicationsPage />} />\n                              <Route path=\"/tasks/*\" element={<TasksPage />} />\n                              <Route path=\"/evidence/*\" element={<EvidencePage />} />\n                              <Route path=\"/risk-monitoring/*\" element={<RiskMonitoringPage />} />\n                              <Route path=\"/pr-messages/*\" element={<PRMessagesPage />} />\n                              <Route path=\"/settings\" element={<SettingsPage />} />\n                              <Route path=\"/profile\" element={<ProfilePage />} />\n                              <Route path=\"*\" element={<NotFoundPage />} />\n                            </Routes>\n                          </Layout>\n                        </ProtectedRoute>\n                      }\n                    />\n                  </Routes>\n                </div>\n              </Router>\n              \n              {/* Global Components */}\n              <Toaster\n                position=\"top-right\"\n                toastOptions={{\n                  duration: 4000,\n                  style: {\n                    background: '#363636',\n                    color: '#fff',\n                  },\n                  success: {\n                    duration: 3000,\n                    iconTheme: {\n                      primary: '#10b981',\n                      secondary: '#fff',\n                    },\n                  },\n                  error: {\n                    duration: 5000,\n                    iconTheme: {\n                      primary: '#ef4444',\n                      secondary: '#fff',\n                    },\n                  },\n                }}\n              />\n              \n              {/* React Query DevTools (development only) */}\n              {process.env.NODE_ENV === 'development' && (\n                <ReactQueryDevtools initialIsOpen={false} />\n              )}\n            </SocketProvider>\n          </AuthProvider>\n        </ThemeProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;"