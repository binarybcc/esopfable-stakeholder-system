apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: case-management
type: Opaque
data:
  postgres-user: cG9zdGdyZXM=  # base64 encoded 'postgres'
  postgres-password: cG9zdGdyZXM=  # base64 encoded 'postgres'
  postgres-db: Y2FzZV9tYW5hZ2VtZW50  # base64 encoded 'case_management'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: case-management
data:
  postgresql.conf: |
    # PostgreSQL configuration for production
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.7
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 8
    max_parallel_workers_per_gather = 2
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 2
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_duration = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: case-management
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: case-management
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgres-primary
      role: primary
  template:
    metadata:
      labels:
        app: postgres-primary
        role: primary
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary-service
  namespace: case-management
spec:
  selector:
    app: postgres-primary
    role: primary
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Read Replica for PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-replica
  namespace: case-management
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres-replica
      role: replica
  template:
    metadata:
      labels:
        app: postgres-replica
        role: replica
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: PGUSER
          value: replica_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-password
        - name: POSTGRES_PRIMARY_SERVICE
          value: postgres-primary-service
        command:
        - /bin/bash
        - -c
        - |
          # Setup streaming replication
          pg_basebackup -h $POSTGRES_PRIMARY_SERVICE -D /var/lib/postgresql/data -U replica_user -v -P -W
          echo "standby_mode = 'on'" >> /var/lib/postgresql/data/recovery.conf
          echo "primary_conninfo = 'host=$POSTGRES_PRIMARY_SERVICE port=5432 user=replica_user'" >> /var/lib/postgresql/data/recovery.conf
          postgres
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-replica-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-replica-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-service
  namespace: case-management
spec:
  selector:
    app: postgres-replica
    role: replica
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP